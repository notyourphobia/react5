{"version":3,"sources":["Wisdom.js","Doer.js","App.js","serviceWorker.js","index.js"],"names":["QuoteDisplayer","props","newPerson","className","name","src","image","class","alt","quote","Doer","doPls","onClick","type","App","state","character","fetch","then","response","json","data","setState","this","getNewPerson","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4MAyBeA,EAvBQ,SAACC,EAAMC,GAC1B,OACI,yBAAKC,UAAU,wCACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,0BACb,yCAEF,yBAAKA,UAAU,wBACVF,EAAMG,OAGf,yBAAKD,UAAU,iCACX,yBAAKE,IAAKJ,EAAMK,MAAOC,MAAM,YAAYC,IAAI,sBAEjD,yBAAKL,UAAU,iCACX,yBAAKA,UAAU,SAAf,IACMF,EAAMQ,MADZ,QCPDC,EARF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OACI,yBAAKR,UAAU,yBACX,4BAAQS,QAASD,EAAOE,KAAK,SAASN,MAAM,wBAA5C,gBCkCGO,E,YAlCb,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAQ,CACXC,UAAW,UACXV,MAAO,gCACPG,MAAO,YALQ,E,4EASH,IAAD,OACbQ,MAAM,gDACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,UAAWK,EAAK,GAAGL,UACnBV,MAAOe,EAAK,GAAGf,MACfG,MAAOY,EAAK,GAAGZ,a,+BAKb,IAAD,OACP,OACE,yBAAKN,UAAU,OAGb,kBAAC,EAAD,CAAgBG,MAAOiB,KAAKR,MAAMT,MAAOF,KAAMmB,KAAKR,MAAMC,UAAWP,MAAOc,KAAKR,MAAMN,QACvF,6BACA,kBAAC,EAAD,CAAME,MAAO,kBAAM,EAAKa,uB,GA7BdC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.d3f22c21.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst QuoteDisplayer = (props,newPerson) => {\r\n    return (\r\n        <div className='QuoteDisplayer container text-center'>\r\n            <div className=\"row justify-content-md-center\">\r\n                <div className=\"col-2 align-self-start\">\r\n                  <strong>Name</strong> \r\n                </div>\r\n                <div className=\"col-2 align-self-end\">\r\n                    {props.name}\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-md-center\">    \r\n                <img src={props.image} class=\"img-fluid\" alt=\"Responsive image\"></img>\r\n            </div>\r\n            <div className=\"row justify-content-md-center\">\r\n                <div className=\"col-4\">\r\n                    \"{props.quote}\"\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n        \r\nexport default QuoteDisplayer;\r\n        \r\n        \r\n","import React from 'react';\r\n\r\nconst Doer = ({doPls}) => {\r\n    return (\r\n        <div className=\"container text-center\">\r\n            <button onClick={doPls} type=\"button\" class=\"btn btn-outline-dark\">New Person</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Doer;","import React, { Component } from 'react'\r\nimport QuoteDisplayer from './Wisdom'\r\nimport Doer from './Doer'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      character: 'LulName',\r\n      image: 'https://picsum.photos/300/300',\r\n      quote: 'LulQuote'\r\n    }\r\n  }\r\n\r\n  getNewPerson() {\r\n    fetch(\"https://thesimpsonsquoteapi.glitch.me/quotes\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          character: data[0].character,\r\n          image: data[0].image,\r\n          quote: data[0].quote\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n\r\n\r\n        <QuoteDisplayer image={this.state.image} name={this.state.character} quote={this.state.quote} />\r\n        <br/>\r\n        <Doer doPls={() => this.getNewPerson()} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}